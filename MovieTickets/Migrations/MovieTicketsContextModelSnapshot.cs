// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieTickets.Models;

namespace MovieTickets.solution.Migrations
{
    [DbContext(typeof(MovieTicketsContext))]
    partial class MovieTicketsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MovieTickets.Models.Concessions", b =>
                {
                    b.Property<int>("ConcessionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Booze")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Candy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Snacks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ConcessionsId");

                    b.ToTable("Concessions");
                });

            modelBuilder.Entity("MovieTickets.Models.ConcessionsTheater", b =>
                {
                    b.Property<int>("ConcessionsTheaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConcessionsId")
                        .HasColumnType("int");

                    b.Property<int>("TheaterId")
                        .HasColumnType("int");

                    b.HasKey("ConcessionsTheaterId");

                    b.HasIndex("ConcessionsId");

                    b.HasIndex("TheaterId");

                    b.ToTable("ConcessionsTheater");
                });

            modelBuilder.Entity("MovieTickets.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieTickets.Models.MovieTheater", b =>
                {
                    b.Property<int>("MovieTheaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("TheaterId")
                        .HasColumnType("int");

                    b.HasKey("MovieTheaterId");

                    b.HasIndex("MovieId");

                    b.HasIndex("TheaterId");

                    b.ToTable("MovieTheater");
                });

            modelBuilder.Entity("MovieTickets.Models.Theater", b =>
                {
                    b.Property<int>("TheaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TheaterId");

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("MovieTickets.Models.ConcessionsTheater", b =>
                {
                    b.HasOne("MovieTickets.Models.Concessions", "Concessions")
                        .WithMany("JoinSnacks")
                        .HasForeignKey("ConcessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieTickets.Models.Theater", "Theater")
                        .WithMany("JoinSnacks")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concessions");

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("MovieTickets.Models.MovieTheater", b =>
                {
                    b.HasOne("MovieTickets.Models.Movie", "Movie")
                        .WithMany("JoinEntities")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieTickets.Models.Theater", "Theater")
                        .WithMany("JoinEntities")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("MovieTickets.Models.Concessions", b =>
                {
                    b.Navigation("JoinSnacks");
                });

            modelBuilder.Entity("MovieTickets.Models.Movie", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("MovieTickets.Models.Theater", b =>
                {
                    b.Navigation("JoinEntities");

                    b.Navigation("JoinSnacks");
                });
#pragma warning restore 612, 618
        }
    }
}
